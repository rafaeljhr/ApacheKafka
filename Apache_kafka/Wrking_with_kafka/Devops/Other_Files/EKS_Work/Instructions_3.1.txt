----------------------
Use cloud9 to setup EC2 > t3.micro

#INSTALL KUBERNETES TOOLS
#Amazon EKS clusters require kubectl and kubelet binaries and the aws-cli or 
#aws-iam-authenticator binary to allow IAM authentication for your Kubernetes cluster.

sudo curl --silent --location -o /usr/local/bin/kubectl \
   https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl

sudo chmod +x /usr/local/bin/kubectl

#Update awscli
#Upgrade AWS CLI 
sudo pip install --upgrade awscli && hash -r

#Install jq, envsubst (from GNU gettext utilities) and bash-completion
sudo yum -y install jq gettext bash-completion moreutils


#Install yq for yaml processing
echo 'yq() {
  docker run --rm -i -v "${PWD}":/workdir mikefarah/yq "$@"
}' | tee -a ~/.bashrc && source ~/.bashrc

#Verify the binaries are in the path and executable
for command in kubectl jq envsubst aws
  do
    which $command &>/dev/null && echo "$command in path" || echo "$command NOT FOUND"
  done

#Enable kubectl bash_completion
kubectl completion bash >>  ~/.bash_completion
. /etc/profile.d/bash_completion.sh
. ~/.bash_completion

#set the AWS Load Balancer Controller version
echo 'export LBC_VERSION="v2.2.0"' >>  ~/.bash_profile
.  ~/.bash_profile

#check docker
docker version
systemctl status docker

#IAM ROLE FOR YOUR WORKSPACE
--create a role 'ekswork-admin' and attach 'AdministratorAccess'

#Attach the role to your workspace
Now from terminal(top right corner) > manage EC2 instances (optional from aws console> ec2 instances)
> Select the instance, then choose Actions / Security / Modify IAM Role
> Choose ekswork-admin from the IAM Role drop down, and select Save

#AWS settings
#Cloud9 normally manages IAM credentials dynamically. This isn’t currently compatible with the 
#EKS IAM authentication,so disable it and rely on the IAM role instead.

>Return to your Cloud9 workspace and click the gear icon (in top right corner)
>Select AWS SETTINGS
>Turn off AWS managed temporary credentials
>Close the Preferences tab

#To ensure temporary credentials aren’t already
rm -vf ${HOME}/.aws/credentials


#configure our aws cli with our current region as default.
export ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)
export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
export AZS=($(aws ec2 describe-availability-zones --query 'AvailabilityZones[].ZoneName' --output text --region $AWS_REGION))

#Check if AWS_REGION is set to desired region
test -n "$AWS_REGION" && echo AWS_REGION is "$AWS_REGION" || echo AWS_REGION is not set

#update bash_profile
echo "export ACCOUNT_ID=${ACCOUNT_ID}" | tee -a ~/.bash_profile
echo "export AWS_REGION=${AWS_REGION}" | tee -a ~/.bash_profile
echo "export AZS=(${AZS[@]})" | tee -a ~/.bash_profile
aws configure set default.region ${AWS_REGION}
aws configure get default.region

#Validate the IAM role
#Use the GetCallerIdentity CLI command to validate that the Cloud9 IDE is using the correct IAM role.
aws sts get-caller-identity --query Arn | grep ekswork-admin -q && echo "IAM role valid" || echo "IAM role NOT valid"

#check if IAM role is valid or verify if all steps done.

(optional)
#cloning repos
cd ~/environment
git clone https://github.com/aws-containers/ecsdemo-frontend.git
git clone https://github.com/brentley/ecsdemo-nodejs.git
git clone https://github.com/brentley/ecsdemo-crystal.git

#CREATE AN AWS KMS CUSTOM MANAGED KEY (CMK)
#Create a CMK for the EKS cluster to use when encrypting your Kubernetes secrets:
aws kms create-alias --alias-name alias/ekswork --target-key-id $(aws kms create-key --query KeyMetadata.Arn --output text)

#retrieve the ARN of the CMK to input into the create cluster command.
export MASTER_ARN=$(aws kms describe-key --key-id alias/ekswork --query KeyMetadata.Arn --output text)

#set the MASTER_ARN environment variable to make it easier to refer to the KMS key later.
#save the MASTER_ARN environment variable into the bash_profile
echo "export MASTER_ARN=${MASTER_ARN}" | tee -a ~/.bash_profile

#create ssh key
ssh-keygen
aws ec2 import-key-pair --key-name "ekswork" --public-key-material file://~/.ssh/id_rsa.pub --region eu-central-1

(end of optional section)







