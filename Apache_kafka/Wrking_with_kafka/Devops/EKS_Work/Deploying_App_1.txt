Deploying sample applications
----------
refer: 
ajuser:~/environment $ ls ecsdemo-nodejs/
buildspec-dockerhub.yml  cdk                 Dockerfile      ecs-params.yml.template  mu.yml             README.md       startup.sh
buildspec-test.yml       code_hash.txt       Dockerfile.cdk  kubernetes               package.json       server.js       test
buildspec.yml            docker-compose.yml  ecs-params.yml  LICENSE                  package-lock.json  startup-cdk.sh
ajuser:~/environment $ ls ecsdemo-nodejs/kubernetes/
deployment.yaml  service.yaml
ajuser:~/environment $ more ecsdemo-nodejs/kubernetes/deployment.yaml
ajuser:~/environment $ more ecsdemo-nodejs/kubernetes/service.yaml

In files above, we describe the service and how it should be deployed. 
We will write this description to the kubernetes api using kubectl, and kubernetes will ensure 
our preferences are met as the application is deployed.
The containers listen on port 3000, and native service discovery will be used to 
locate the running containers and communicate with them.

##Bring up the NodeJS Backend API!

#
cd ~/environment/ecsdemo-nodejs
kubectl apply -f kubernetes/deployment.yaml
kubectl apply -f kubernetes/service.yaml

#Looking at progress
kubectl get deployment ecsdemo-nodejs

---sampleoutput---

ajuser:~/environment/ecsdemo-nodejs (master) $ kubectl apply -f kubernetes/deployment.yaml
deployment.apps/ecsdemo-nodejs created
ajuser:~/environment/ecsdemo-nodejs (master) $ kubectl apply -f kubernetes/service.yaml
service/ecsdemo-nodejs created
ajuser:~/environment/ecsdemo-nodejs (master) $ kubectl get deployment ecsdemo-nodejs
NAME             READY   UP-TO-DATE   AVAILABLE   AGE
ecsdemo-nodejs   1/1     1            1           11s

-------

##Bring up the Crystal Backend API!
cd ~/environment/ecsdemo-crystal
kubectl apply -f kubernetes/deployment.yaml
kubectl apply -f kubernetes/service.yaml

#Looking at progress
kubectl get deployment ecsdemo-crystal

----sampleoutput-----
ajuser:~/environment/ecsdemo-nodejs (master) $ cd ~/environment/ecsdemo-crystal
ajuser:~/environment/ecsdemo-crystal (master) $ kubectl apply -f kubernetes/deployment.yaml
deployment.apps/ecsdemo-crystal created
ajuser:~/environment/ecsdemo-crystal (master) $ kubectl apply -f kubernetes/service.yaml
service/ecsdemo-crystal created
ajuser:~/environment/ecsdemo-crystal (master) $ kubectl get deployment ecsdemo-crystal
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
ecsdemo-crystal   1/1     1            1           8s
ajuser:~/environment/ecsdemo-crystal (master) $
---------------------
#Frontend services
#ecsdemo-frontend/kubernetes/service.yaml shows the service types 
#type: LoadBalancer: This will configure an ELB to handle incoming traffic to this service.

#Backend services
#ecsdemo-nodejs/kubernetes/service.yaml shows no specific service type defined
#default type is ClusterIP. This Exposes the service on a cluster-internal IP. 
#Choosing this value makes the service only reachable from within the cluster.

#check for the role & create service role for ELB
aws iam get-role --role-name "AWSServiceRoleForElasticLoadBalancing" || aws iam create-service-linked-role --aws-service-name "elasticloadbalancing.amazonaws.com"
--------sampleoutput-----------
An error occurred (NoSuchEntity) when calling the GetRole operation: The role with name AWSServiceRoleForElasticLoadBalancing cannot be found.
{
    "Role": {
        "AssumeRolePolicyDocument": {
            "Version": "2012-10-17", 
            "Statement": [
                {
                    "Action": [
                        "sts:AssumeRole"
                    ], 
                    "Effect": "Allow", 
                    "Principal": {
                        "Service": [
                            "elasticloadbalancing.amazonaws.com"
                        ]
                    }
                }
            ]
        }, 
        "RoleId": "AROAWOSGDDVNOXLDYAGOM", 
        "CreateDate": "2021-08-11T08:21:39Z", 
        "RoleName": "AWSServiceRoleForElasticLoadBalancing", 
        "Path": "/aws-service-role/elasticloadbalancing.amazonaws.com/", 
        "Arn": "arn:aws:iam::443602378074:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing"
    }
}
------------------------
##Bring up ruby front end
cd ~/environment/ecsdemo-frontend
kubectl apply -f kubernetes/deployment.yaml
kubectl apply -f kubernetes/service.yaml

kubectl get deployment ecsdemo-frontend

-----sampleoutput------
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl apply -f kubernetes/deployment.yaml
deployment.apps/ecsdemo-frontend created
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl apply -f kubernetes/service.yaml
service/ecsdemo-frontend created
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl get deployment ecsdemo-frontend
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
ecsdemo-frontend   0/1     1            0           18s

-----------------------
#Now that we have a running service that is type: LoadBalancer we need to find the ELB’s address.
kubectl get service ecsdemo-frontend

#If the field isn’t wide enough to show the FQDN of the ELB. 
#We can adjust the output format with this command:
kubectl get service ecsdemo-frontend -o wide

-----sampleoutput------------
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl get service ecsdemo-frontend

NAME               TYPE           CLUSTER-IP      EXTERNAL-IP                                                                 PORT(S)        AGE
ecsdemo-frontend   LoadBalancer   10.100.37.131   a8adbcd541f4741b3967b76f5620ebe6-946929225.eu-central-1.elb.amazonaws.com   80:31009/TCP   97s
ajuser:~/environment/ecsdemo-frontend (main) $ 
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl get service ecsdemo-frontend -o wide
NAME               TYPE           CLUSTER-IP      EXTERNAL-IP                                                                 PORT(S)        AGE     SELECTOR
ecsdemo-frontend   LoadBalancer   10.100.37.131   a8adbcd541f4741b3967b76f5620ebe6-946929225.eu-central-1.elb.amazonaws.com   80:31009/TCP   2m22s   app=ecsdemo-frontend

-----------------------------

#we can also output via json.
ELB=$(kubectl get service ecsdemo-frontend -o json | jq -r '.status.loadBalancer.ingress[].hostname')

#using json output
curl -m3 -v $ELB

#get external IP and try accessing using browser
http://a8adbcd541f4741b3967b76f5620ebe6-946929225.eu-central-1.elb.amazonaws.com/

##Scaling the backend
#check running pods
kubectl get deployments

-----------sampleoutput--------
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl get deployments

NAME               READY   UP-TO-DATE   AVAILABLE   AGE
ecsdemo-crystal    1/1     1            1           16m
ecsdemo-frontend   1/1     1            1           8m31s
ecsdemo-nodejs     1/1     1            1           17m
------------------------------

##Scale the backend services
kubectl scale deployment ecsdemo-nodejs --replicas=3
kubectl scale deployment ecsdemo-crystal --replicas=3

-------------sampleoutput------------
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl scale deployment ecsdemo-nodejs --replicas=3
deployment.apps/ecsdemo-nodejs scaled
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl scale deployment ecsdemo-crystal --replicas=3
deployment.apps/ecsdemo-crystal scaled
ajuser:~/environment/ecsdemo-frontend (main) $ kubectl get deployments
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
ecsdemo-crystal    1/3     3            1           17m
ecsdemo-frontend   1/1     1            1           9m29s
ecsdemo-nodejs     1/3     3            1           18m
-------------------------------------

##Scaling Frontend services
kubectl get deployments
kubectl scale deployment ecsdemo-frontend --replicas=3
kubectl get deployments

Check the browser tab where we can see our application running. 
You should now see traffic flowing to multiple frontend services.

#
delete the resources created by the applications, we should delete the application deployments:
Undeploy the applications:
cd ~/environment/ecsdemo-frontend
kubectl delete -f kubernetes/service.yaml
kubectl delete -f kubernetes/deployment.yaml

cd ~/environment/ecsdemo-crystal
kubectl delete -f kubernetes/service.yaml
kubectl delete -f kubernetes/deployment.yaml

cd ~/environment/ecsdemo-nodejs
kubectl delete -f kubernetes/service.yaml
kubectl delete -f kubernetes/deployment.yaml

#Finally check your cluster
$ kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.100.0.1   <none>        443/TCP   102m

$ kubectl get nodes
NAME                                              STATUS   ROLES    AGE   VERSION
ip-192-168-14-175.eu-central-1.compute.internal   Ready    <none>   92m   v1.19.6-eks-49a6c0
ip-192-168-61-44.eu-central-1.compute.internal    Ready    <none>   92m   v1.19.6-eks-49a6c0
ip-192-168-85-224.eu-central-1.compute.internal   Ready    <none>   92m   v1.19.6-eks-49a6c0
$ kubectl get pods
No resources found in default namespace.

$ kubectl get deployments
No resources found in default namespace.


