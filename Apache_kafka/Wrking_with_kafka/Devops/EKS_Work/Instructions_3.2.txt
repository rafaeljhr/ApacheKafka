Setting up EKS cluster using eksctl
--------------
#Download eksctl binary:
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv -v /tmp/eksctl /usr/local/bin

#check
eksctl version

#Enable eksctl bash-completion
eksctl completion bash >> ~/.bash_completion
. /etc/profile.d/bash_completion.sh
. ~/.bash_completion

#Create an eksctl deployment file 
#(ekswork.yaml) use in creating your cluster using the following syntax:
cat << EOF > ekswork.yaml
---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: ekswork-eksctl
  region: ${AWS_REGION}
  version: "1.19"

availabilityZones: ["${AZS[0]}", "${AZS[1]}", "${AZS[2]}"]

managedNodeGroups:
- name: nodegroup
  desiredCapacity: 3
  instanceType: t3.small
  ssh:
    enableSsm: true

# To enable all of the control plane logs, uncomment below:
# cloudWatch:
#  clusterLogging:
#    enableTypes: ["*"]

secretsEncryption:
  keyARN: ${MASTER_ARN}
EOF

#use the file you created as the input for the eksctl cluster creation.
eksctl create cluster -f ekswork.yaml

---
Note**
meanwhile check services> cloudformation
we can look at any stack, pull out template info in 'template.json'
>cat template.json | jq . | wc -l


---
#Test the cluster
kubectl get nodes # if we see our 3 nodes, we know we have authenticated correctly

#Export the Worker Role Name for use throughout the workshop
STACK_NAME=$(eksctl get nodegroup --cluster ekswork-eksctl -o json | jq -r '.[].StackName')
ROLE_NAME=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME | jq -r '.StackResources[] | select(.ResourceType=="AWS::IAM::Role") | .PhysicalResourceId')
echo "export ROLE_NAME=${ROLE_NAME}" | tee -a ~/.bash_profile

#refer access_console.txt for providing access for EKS console

#


