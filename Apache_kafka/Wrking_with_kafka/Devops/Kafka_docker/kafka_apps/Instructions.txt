Instructions:

root@m1:~# apt install maven /*if maven not installed*/
Create your project > all classes for your apps > run a 'maven install'
Check if done successfully - "Installing /root/kafka_apps/target/kafka-0.0.1-SNAPSHOT.jar"
#To test locally from an IDE (start a kafka cluster as standalone)

-Run producer application
-try curl command and do a post(as shown below)
-Run consumer application

#To test by containerization/docker containers
#Creating a docker image of your application
Create a Dockerfile in project
--
#using JDK
FROM openjdk:8

#copy jar into docker image
COPY target/kafka-0.0.1-SNAPSHOT.jar /test.jar

#setup the startup command to execute jar
CMD ["java", "-jar", "/test.jar"]
--
#Note, the jar must be existing in target folder of your project or complete the step of 'maven install'
#Note, the Dockerfile must be existing in your project 'kafka_apps'
root@m1:~/kafka_apps# docker build -t test/kafka-ide .
root@m1:~/kafka_apps# docker images

#Note** Before running your docker image of APP, make sure a container that runs kafka standalone is already started OR
#multiple containers that run your kafka brokers,zookeepers are running and reachable

#run your docker image of app
root@m1:~/kafka_apps# docker run test/kafka-ide

#The above command will run your applications within a container ,
#this container should then communicate with kafka 
#when application runs,
     #producer creates a topic 'test_topic' when a publish is done via curl/API (broker to connect is provided in src/main/resources/application.yml)
     #curl command : curl -X POST http://localhost:8080/publish?message=test1
     #consumer connects to kafka-broker (as per application.yml) and consumes the messages.

#application can be modified to connect to specific broker running via another container
#we can use:
Option 1: docker to build images > docker run to run the containers and if all in same node then containers can communicate provided they connect to same network, apart from
other mandatory config details such as hostname/port etc.
Option 2: Use already built images/build images by using 'docker-compose', which will use/build images > start the containers 
Option 3: Deploying your docker images on a platform that allows multiple containers to be deployed and communicate. (example EKS)

